apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
//Bugly
//apply from: 'tinker-support.gradle'
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.mantic.control"
        minSdkVersion 19
        targetSdkVersion 22
        versionCode project.VERSION_CODE as int
        versionName project.VERSION_NAME
        multiDexEnabled true
//        multiDexKeepProguard file('multiDexKeep.pro') // keep specific classes using proguard syntax
//        multiDexKeepFile file('multiDexKeep.txt') // keep specific classes
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a'
        }
    }

    useLibrary 'org.apache.http.legacy'
    signingConfigs {
        release {
            storeFile file("./keystore/mantic.keystore")
            storePassword "mantic1234"
            keyAlias "mantic"
            keyPassword "mantic1234"
        }
        //因为绑定IOT需要签名验证 所以debug和 release 用一个keystore
        debug {
            storeFile file("./keystore/mantic.keystore")
            storePassword "mantic1234"
            keyAlias "mantic"
            keyPassword "mantic1234"
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }

        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    dexOptions {
        jumboMode = true;
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
    }
    android.applicationVariants.all { variant ->
        def buildType = variant.buildType.name
        //使用{date} $buildDir
        def date = new Date().format("YYYY-MMdd-HH-mm")

        if (buildType == 'debug') {
            //
        }
        if (buildType == 'release') {
            //
        }

        variant.outputs.each { output ->
            def fileName = "${APK_NAME}_${variant.versionName}_${variant.buildType.name}_${variant.flavorName}.apk";
            output.outputFile = new File(output.outputFile.parent, fileName)

            //把unaligned apk删除掉 看着碍眼
            File unaligned = output.packageApplication.outputFile
            unaligned.delete()
        }

        //使用 assemble 的时候 指定APK路径
//        output.assemble.doLast {
//            copy {
//                from output.outputFile.getAbsolutePath()
//                into properties.getProperty('apk.out.dir')
//            }
//        }
    }
    productFlavors {
        coomaantest {
            manifestPlaceholders = [
                    BAIDU_CLIENT_ID: "dA8211HVQAA3DAG8ztKXdh45QreIrRlG",
                    BAIDU_SECRET_ID: "Z7NHONz6OgOQ9vElLO7PWg0VG1hugPl0"
            ]
        }
        coomaanformal {
            manifestPlaceholders = [
                    BAIDU_CLIENT_ID: "d3S3SbItdlYDj4KaOB1qIfuM",
                    BAIDU_SECRET_ID: "221b497771f29a469236d77cf5f376de"
            ]
        }
    }

}
repositories {
    flatDir {
        dirs '../mycommon', '../antservice/libs', 'libs'
//this way we can find the .aar file in libs folder
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
  //  compile(name: 'expandable_text_view', ext: 'aar')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:design:25.4.0'
    compile 'com.android.support:palette-v7:25.4.0'
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:1.0.2'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.5'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.7'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.7'
    compile 'com.lcodecorex:tkrefreshlayout:1.0.4'
    compile 'me.yokeyword:swipebackfragment:0.4.0'
    compile 'com.xw.repo:bubbleseekbar:3.4-lite'
    //bugly
    compile 'com.tencent.bugly:crashreport_upgrade:1.3.4'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.tencent.bugly:nativecrashreport:3.3.1'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    compile 'com.jaeger.statusbarutil:library:1.4.0'
    compile 'com.kyleduo.switchbutton:library:1.4.6'
    compile project(':antservice')
    compile(name: 'alicloud-android-feedback-3.1.1', ext: 'aar')
    compile files('libs/alicloud-android-monitor-2.5.1.1_for_bc_proguard.jar')
    compile files('libs/alicloud-android-utils-1.1.1.jar')
    compile files('libs/utdid4all-1.1.5.3_proguard.jar')
    compile 'com.hejunlin.superindicatorlibray:superindicatorlibray:1.0.3'
    compile 'com.recker.flybanner:flybanner:1.3'
    compile 'com.makeramen:roundedimageview:2.3.0'
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    compile 'cn.aigestudio.wheelpicker:WheelPicker:1.1.2'
    //    compile project(':libffmpeg')
}
